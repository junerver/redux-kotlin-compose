[{"name":"fun <T : Any> StoreProvider(store: Store<T>, content: Store<T>.() -> Unit)","description":"org.reduxkotlin.compose.StoreProvider","location":"redux-kotlin-compose/org.reduxkotlin.compose/-store-provider.html","searchKeys":["StoreProvider","fun <T : Any> StoreProvider(store: Store<T>, content: Store<T>.() -> Unit)","org.reduxkotlin.compose.StoreProvider"]},{"name":"fun <TState> rememberStore(): Store<TState>","description":"org.reduxkotlin.compose.rememberStore","location":"redux-kotlin-compose/org.reduxkotlin.compose/remember-store.html","searchKeys":["rememberStore","fun <TState> rememberStore(): Store<TState>","org.reduxkotlin.compose.rememberStore"]},{"name":"fun rememberDispatcher(): Dispatcher","description":"org.reduxkotlin.compose.rememberDispatcher","location":"redux-kotlin-compose/org.reduxkotlin.compose/remember-dispatcher.html","searchKeys":["rememberDispatcher","fun rememberDispatcher(): Dispatcher","org.reduxkotlin.compose.rememberDispatcher"]},{"name":"inline fun <TState, TSlice> Store<TState>.selectState(crossinline selector: TState.() -> TSlice): State<TSlice>","description":"org.reduxkotlin.compose.selectState","location":"redux-kotlin-compose/org.reduxkotlin.compose/select-state.html","searchKeys":["selectState","inline fun <TState, TSlice> Store<TState>.selectState(crossinline selector: TState.() -> TSlice): State<TSlice>","org.reduxkotlin.compose.selectState"]},{"name":"inline fun <TState, TSlice> selectState(crossinline selector: TState.() -> TSlice): State<TSlice>","description":"org.reduxkotlin.compose.selectState","location":"redux-kotlin-compose/org.reduxkotlin.compose/select-state.html","searchKeys":["selectState","inline fun <TState, TSlice> selectState(crossinline selector: TState.() -> TSlice): State<TSlice>","org.reduxkotlin.compose.selectState"]}]
